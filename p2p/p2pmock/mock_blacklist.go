// Code generated by MockGen. DO NOT EDIT.
// Source: p2p/audit/blacklist.go

// Package p2pmock is a generated GoMock package.
package p2pmock

import (
	audit "github.com/aergoio/aergo/p2p/audit"
	gomock "github.com/golang/mock/gomock"
	go_libp2p_peer "github.com/libp2p/go-libp2p-peer"
	reflect "reflect"
	time "time"
)

// MockBlacklistManager is a mock of BlacklistManager interface
type MockBlacklistManager struct {
	ctrl     *gomock.Controller
	recorder *MockBlacklistManagerMockRecorder
}

// MockBlacklistManagerMockRecorder is the mock recorder for MockBlacklistManager
type MockBlacklistManagerMockRecorder struct {
	mock *MockBlacklistManager
}

// NewMockBlacklistManager creates a new mock instance
func NewMockBlacklistManager(ctrl *gomock.Controller) *MockBlacklistManager {
	mock := &MockBlacklistManager{ctrl: ctrl}
	mock.recorder = &MockBlacklistManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlacklistManager) EXPECT() *MockBlacklistManagerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockBlacklistManager) Start() {
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockBlacklistManagerMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBlacklistManager)(nil).Start))
}

// Stop mocks base method
func (m *MockBlacklistManager) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockBlacklistManagerMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBlacklistManager)(nil).Stop))
}

// NewPeerAuditor mocks base method
func (m *MockBlacklistManager) NewPeerAuditor(address string, peerID go_libp2p_peer.ID, exceedlistener audit.ExceedListener) audit.PeerAuditor {
	ret := m.ctrl.Call(m, "NewPeerAuditor", address, peerID, exceedlistener)
	ret0, _ := ret[0].(audit.PeerAuditor)
	return ret0
}

// NewPeerAuditor indicates an expected call of NewPeerAuditor
func (mr *MockBlacklistManagerMockRecorder) NewPeerAuditor(address, peerID, exceedlistener interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPeerAuditor", reflect.TypeOf((*MockBlacklistManager)(nil).NewPeerAuditor), address, peerID, exceedlistener)
}

// IsBanned mocks base method
func (m *MockBlacklistManager) IsBanned(addr string, pid go_libp2p_peer.ID) (bool, time.Time) {
	ret := m.ctrl.Call(m, "IsBanned", addr, pid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(time.Time)
	return ret0, ret1
}

// IsBanned indicates an expected call of IsBanned
func (mr *MockBlacklistManagerMockRecorder) IsBanned(addr, pid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBanned", reflect.TypeOf((*MockBlacklistManager)(nil).IsBanned), addr, pid)
}

// IsBannedPeerID mocks base method
func (m *MockBlacklistManager) IsBannedPeerID(peerID go_libp2p_peer.ID) (bool, time.Time) {
	ret := m.ctrl.Call(m, "IsBannedPeerID", peerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(time.Time)
	return ret0, ret1
}

// IsBannedPeerID indicates an expected call of IsBannedPeerID
func (mr *MockBlacklistManagerMockRecorder) IsBannedPeerID(peerID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBannedPeerID", reflect.TypeOf((*MockBlacklistManager)(nil).IsBannedPeerID), peerID)
}

// IsBannedAddr mocks base method
func (m *MockBlacklistManager) IsBannedAddr(addr string) (bool, time.Time) {
	ret := m.ctrl.Call(m, "IsBannedAddr", addr)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(time.Time)
	return ret0, ret1
}

// IsBannedAddr indicates an expected call of IsBannedAddr
func (mr *MockBlacklistManagerMockRecorder) IsBannedAddr(addr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBannedAddr", reflect.TypeOf((*MockBlacklistManager)(nil).IsBannedAddr), addr)
}

// GetStatusByID mocks base method
func (m *MockBlacklistManager) GetStatusByID(peerID go_libp2p_peer.ID) (audit.BanStatus, error) {
	ret := m.ctrl.Call(m, "GetStatusByID", peerID)
	ret0, _ := ret[0].(audit.BanStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusByID indicates an expected call of GetStatusByID
func (mr *MockBlacklistManagerMockRecorder) GetStatusByID(peerID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusByID", reflect.TypeOf((*MockBlacklistManager)(nil).GetStatusByID), peerID)
}

// GetStatusByAddr mocks base method
func (m *MockBlacklistManager) GetStatusByAddr(addr string) (audit.BanStatus, error) {
	ret := m.ctrl.Call(m, "GetStatusByAddr", addr)
	ret0, _ := ret[0].(audit.BanStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusByAddr indicates an expected call of GetStatusByAddr
func (mr *MockBlacklistManagerMockRecorder) GetStatusByAddr(addr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusByAddr", reflect.TypeOf((*MockBlacklistManager)(nil).GetStatusByAddr), addr)
}

// Summary mocks base method
func (m *MockBlacklistManager) Summary() map[string]interface{} {
	ret := m.ctrl.Call(m, "Summary")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Summary indicates an expected call of Summary
func (mr *MockBlacklistManagerMockRecorder) Summary() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summary", reflect.TypeOf((*MockBlacklistManager)(nil).Summary))
}

// MockBanStatus is a mock of BanStatus interface
type MockBanStatus struct {
	ctrl     *gomock.Controller
	recorder *MockBanStatusMockRecorder
}

// MockBanStatusMockRecorder is the mock recorder for MockBanStatus
type MockBanStatusMockRecorder struct {
	mock *MockBanStatus
}

// NewMockBanStatus creates a new mock instance
func NewMockBanStatus(ctrl *gomock.Controller) *MockBanStatus {
	mock := &MockBanStatus{ctrl: ctrl}
	mock.recorder = &MockBanStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBanStatus) EXPECT() *MockBanStatusMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockBanStatus) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockBanStatusMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockBanStatus)(nil).ID))
}

// BanUntil mocks base method
func (m *MockBanStatus) BanUntil() time.Time {
	ret := m.ctrl.Call(m, "BanUntil")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// BanUntil indicates an expected call of BanUntil
func (mr *MockBanStatusMockRecorder) BanUntil() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanUntil", reflect.TypeOf((*MockBanStatus)(nil).BanUntil))
}

// Banned mocks base method
func (m *MockBanStatus) Banned(refTime time.Time) bool {
	ret := m.ctrl.Call(m, "Banned", refTime)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Banned indicates an expected call of Banned
func (mr *MockBanStatusMockRecorder) Banned(refTime interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Banned", reflect.TypeOf((*MockBanStatus)(nil).Banned), refTime)
}

// Events mocks base method
func (m *MockBanStatus) Events() []audit.BanEvent {
	ret := m.ctrl.Call(m, "Events")
	ret0, _ := ret[0].([]audit.BanEvent)
	return ret0
}

// Events indicates an expected call of Events
func (mr *MockBanStatusMockRecorder) Events() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockBanStatus)(nil).Events))
}

// PruneOldEvents mocks base method
func (m *MockBanStatus) PruneOldEvents(pruneTime time.Time) int {
	ret := m.ctrl.Call(m, "PruneOldEvents", pruneTime)
	ret0, _ := ret[0].(int)
	return ret0
}

// PruneOldEvents indicates an expected call of PruneOldEvents
func (mr *MockBanStatusMockRecorder) PruneOldEvents(pruneTime interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneOldEvents", reflect.TypeOf((*MockBanStatus)(nil).PruneOldEvents), pruneTime)
}

// MockBanEvent is a mock of BanEvent interface
type MockBanEvent struct {
	ctrl     *gomock.Controller
	recorder *MockBanEventMockRecorder
}

// MockBanEventMockRecorder is the mock recorder for MockBanEvent
type MockBanEventMockRecorder struct {
	mock *MockBanEvent
}

// NewMockBanEvent creates a new mock instance
func NewMockBanEvent(ctrl *gomock.Controller) *MockBanEvent {
	mock := &MockBanEvent{ctrl: ctrl}
	mock.recorder = &MockBanEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBanEvent) EXPECT() *MockBanEventMockRecorder {
	return m.recorder
}

// When mocks base method
func (m *MockBanEvent) When() time.Time {
	ret := m.ctrl.Call(m, "When")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// When indicates an expected call of When
func (mr *MockBanEventMockRecorder) When() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "When", reflect.TypeOf((*MockBanEvent)(nil).When))
}

// Why mocks base method
func (m *MockBanEvent) Why() string {
	ret := m.ctrl.Call(m, "Why")
	ret0, _ := ret[0].(string)
	return ret0
}

// Why indicates an expected call of Why
func (mr *MockBanEventMockRecorder) Why() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Why", reflect.TypeOf((*MockBanEvent)(nil).Why))
}
