// Code generated by MockGen. DO NOT EDIT.
// Source: listmanager.go

// Package p2pmock is a generated GoMock package.
package p2pmock

import (
	types "github.com/aergoio/aergo/v2/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockListManager is a mock of ListManager interface
type MockListManager struct {
	ctrl     *gomock.Controller
	recorder *MockListManagerMockRecorder
}

// MockListManagerMockRecorder is the mock recorder for MockListManager
type MockListManagerMockRecorder struct {
	mock *MockListManager
}

// NewMockListManager creates a new mock instance
func NewMockListManager(ctrl *gomock.Controller) *MockListManager {
	mock := &MockListManager{ctrl: ctrl}
	mock.recorder = &MockListManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockListManager) EXPECT() *MockListManagerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockListManager) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockListManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockListManager)(nil).Start))
}

// Stop mocks base method
func (m *MockListManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockListManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockListManager)(nil).Stop))
}

// IsBanned mocks base method
func (m *MockListManager) IsBanned(addr string, pid types.PeerID) (bool, time.Time) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBanned", addr, pid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(time.Time)
	return ret0, ret1
}

// IsBanned indicates an expected call of IsBanned
func (mr *MockListManagerMockRecorder) IsBanned(addr, pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBanned", reflect.TypeOf((*MockListManager)(nil).IsBanned), addr, pid)
}

// RefineList mocks base method
func (m *MockListManager) RefineList() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefineList")
}

// RefineList indicates an expected call of RefineList
func (mr *MockListManagerMockRecorder) RefineList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefineList", reflect.TypeOf((*MockListManager)(nil).RefineList))
}

// Summary mocks base method
func (m *MockListManager) Summary() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summary")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Summary indicates an expected call of Summary
func (mr *MockListManagerMockRecorder) Summary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summary", reflect.TypeOf((*MockListManager)(nil).Summary))
}
