// Code generated by MockGen. DO NOT EDIT.
// Source: internalservice.go

// Package p2pmock is a generated GoMock package.
package p2pmock

import (
	consensus "github.com/aergoio/aergo/v2/consensus"
	p2pcommon "github.com/aergoio/aergo/v2/p2p/p2pcommon"
	types "github.com/aergoio/aergo/v2/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInternalService is a mock of InternalService interface
type MockInternalService struct {
	ctrl     *gomock.Controller
	recorder *MockInternalServiceMockRecorder
}

// MockInternalServiceMockRecorder is the mock recorder for MockInternalService
type MockInternalServiceMockRecorder struct {
	mock *MockInternalService
}

// NewMockInternalService creates a new mock instance
func NewMockInternalService(ctrl *gomock.Controller) *MockInternalService {
	mock := &MockInternalService{ctrl: ctrl}
	mock.recorder = &MockInternalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInternalService) EXPECT() *MockInternalServiceMockRecorder {
	return m.recorder
}

// SelfMeta mocks base method
func (m *MockInternalService) SelfMeta() p2pcommon.PeerMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfMeta")
	ret0, _ := ret[0].(p2pcommon.PeerMeta)
	return ret0
}

// SelfMeta indicates an expected call of SelfMeta
func (mr *MockInternalServiceMockRecorder) SelfMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfMeta", reflect.TypeOf((*MockInternalService)(nil).SelfMeta))
}

// SelfNodeID mocks base method
func (m *MockInternalService) SelfNodeID() types.PeerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfNodeID")
	ret0, _ := ret[0].(types.PeerID)
	return ret0
}

// SelfNodeID indicates an expected call of SelfNodeID
func (mr *MockInternalServiceMockRecorder) SelfNodeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfNodeID", reflect.TypeOf((*MockInternalService)(nil).SelfNodeID))
}

// LocalSettings mocks base method
func (m *MockInternalService) LocalSettings() p2pcommon.LocalSettings {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalSettings")
	ret0, _ := ret[0].(p2pcommon.LocalSettings)
	return ret0
}

// LocalSettings indicates an expected call of LocalSettings
func (mr *MockInternalServiceMockRecorder) LocalSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalSettings", reflect.TypeOf((*MockInternalService)(nil).LocalSettings))
}

// GetChainAccessor mocks base method
func (m *MockInternalService) GetChainAccessor() types.ChainAccessor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainAccessor")
	ret0, _ := ret[0].(types.ChainAccessor)
	return ret0
}

// GetChainAccessor indicates an expected call of GetChainAccessor
func (mr *MockInternalServiceMockRecorder) GetChainAccessor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainAccessor", reflect.TypeOf((*MockInternalService)(nil).GetChainAccessor))
}

// ConsensusAccessor mocks base method
func (m *MockInternalService) ConsensusAccessor() consensus.ConsensusAccessor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsensusAccessor")
	ret0, _ := ret[0].(consensus.ConsensusAccessor)
	return ret0
}

// ConsensusAccessor indicates an expected call of ConsensusAccessor
func (mr *MockInternalServiceMockRecorder) ConsensusAccessor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsensusAccessor", reflect.TypeOf((*MockInternalService)(nil).ConsensusAccessor))
}

// PeerManager mocks base method
func (m *MockInternalService) PeerManager() p2pcommon.PeerManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerManager")
	ret0, _ := ret[0].(p2pcommon.PeerManager)
	return ret0
}

// PeerManager indicates an expected call of PeerManager
func (mr *MockInternalServiceMockRecorder) PeerManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerManager", reflect.TypeOf((*MockInternalService)(nil).PeerManager))
}

// CertificateManager mocks base method
func (m *MockInternalService) CertificateManager() p2pcommon.CertificateManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificateManager")
	ret0, _ := ret[0].(p2pcommon.CertificateManager)
	return ret0
}

// CertificateManager indicates an expected call of CertificateManager
func (mr *MockInternalServiceMockRecorder) CertificateManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificateManager", reflect.TypeOf((*MockInternalService)(nil).CertificateManager))
}

// RoleManager mocks base method
func (m *MockInternalService) RoleManager() p2pcommon.PeerRoleManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleManager")
	ret0, _ := ret[0].(p2pcommon.PeerRoleManager)
	return ret0
}

// RoleManager indicates an expected call of RoleManager
func (mr *MockInternalServiceMockRecorder) RoleManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleManager", reflect.TypeOf((*MockInternalService)(nil).RoleManager))
}
