// Code generated by MockGen. DO NOT EDIT.
// Source: metricsman.go

// Package p2pmock is a generated GoMock package.
package p2pmock

import (
	metric "github.com/aergoio/aergo/v2/p2p/metric"
	types "github.com/aergoio/aergo/v2/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMetricsManager is a mock of MetricsManager interface
type MockMetricsManager struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsManagerMockRecorder
}

// MockMetricsManagerMockRecorder is the mock recorder for MockMetricsManager
type MockMetricsManagerMockRecorder struct {
	mock *MockMetricsManager
}

// NewMockMetricsManager creates a new mock instance
func NewMockMetricsManager(ctrl *gomock.Controller) *MockMetricsManager {
	mock := &MockMetricsManager{ctrl: ctrl}
	mock.recorder = &MockMetricsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricsManager) EXPECT() *MockMetricsManagerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockMetricsManager) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockMetricsManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMetricsManager)(nil).Start))
}

// Stop mocks base method
func (m *MockMetricsManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockMetricsManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMetricsManager)(nil).Stop))
}

// NewMetric mocks base method
func (m *MockMetricsManager) NewMetric(pid types.PeerID, manNum uint32) *metric.PeerMetric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMetric", pid, manNum)
	ret0, _ := ret[0].(*metric.PeerMetric)
	return ret0
}

// NewMetric indicates an expected call of NewMetric
func (mr *MockMetricsManagerMockRecorder) NewMetric(pid, manNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMetric", reflect.TypeOf((*MockMetricsManager)(nil).NewMetric), pid, manNum)
}

// Remove mocks base method
func (m *MockMetricsManager) Remove(pid types.PeerID, manNum uint32) *metric.PeerMetric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", pid, manNum)
	ret0, _ := ret[0].(*metric.PeerMetric)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockMetricsManagerMockRecorder) Remove(pid, manNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockMetricsManager)(nil).Remove), pid, manNum)
}

// Metric mocks base method
func (m *MockMetricsManager) Metric(pid types.PeerID) (*metric.PeerMetric, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metric", pid)
	ret0, _ := ret[0].(*metric.PeerMetric)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Metric indicates an expected call of Metric
func (mr *MockMetricsManagerMockRecorder) Metric(pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metric", reflect.TypeOf((*MockMetricsManager)(nil).Metric), pid)
}

// Metrics mocks base method
func (m *MockMetricsManager) Metrics() []*metric.PeerMetric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metrics")
	ret0, _ := ret[0].([]*metric.PeerMetric)
	return ret0
}

// Metrics indicates an expected call of Metrics
func (mr *MockMetricsManagerMockRecorder) Metrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metrics", reflect.TypeOf((*MockMetricsManager)(nil).Metrics))
}

// Summary mocks base method
func (m *MockMetricsManager) Summary() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summary")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Summary indicates an expected call of Summary
func (mr *MockMetricsManagerMockRecorder) Summary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summary", reflect.TypeOf((*MockMetricsManager)(nil).Summary))
}

// PrintMetrics mocks base method
func (m *MockMetricsManager) PrintMetrics() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintMetrics")
	ret0, _ := ret[0].(string)
	return ret0
}

// PrintMetrics indicates an expected call of PrintMetrics
func (mr *MockMetricsManagerMockRecorder) PrintMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintMetrics", reflect.TypeOf((*MockMetricsManager)(nil).PrintMetrics))
}
